/* ============ TESTE DA CLOUD FUNCTION DE EXPIRA√á√ÉO ============ */
/**
 * Script para testar a Cloud Function checkExpiredPlans
 * Este script pode ser executado no console do navegador ou como arquivo separado
 */

// VERS√ÉO PARA CONSOLE DO NAVEGADOR (ap√≥s autentica√ß√£o)
async function testarCloudFunctionExpiracao() {
    console.log('üß™ INICIANDO TESTE DA CLOUD FUNCTION DE EXPIRA√á√ÉO');
    console.log('=================================================');
    
    try {
        // 1. Verificar se Firebase Functions est√° dispon√≠vel
        if (!window.firebase || !window.firebase.functions) {
            console.error('‚ùå Firebase Functions n√£o est√° dispon√≠vel');
            console.log('üí° Certifique-se de que o Firebase SDK est√° carregado');
            return false;
        }
        
        // 2. Verificar autentica√ß√£o
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå Usu√°rio n√£o est√° autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        console.log('üë§ Usu√°rio autenticado:', user.email);
        
        // 3. Preparar chamada para a Cloud Function de teste
        const functions = window.firebase.functions();
        const testCheckExpiredPlans = functions.httpsCallable('testCheckExpiredPlans');
        
        console.log('üîÑ Chamando Cloud Function de teste...');
        console.log('‚ö†Ô∏è Esta √© uma execu√ß√£o de TESTE - nenhum dado ser√° alterado');
        
        // 4. Executar a fun√ß√£o de teste
        const resultado = await testCheckExpiredPlans();
        
        console.log('üì° Resposta da Cloud Function:');
        console.log('============================');
        console.log('‚úÖ Sucesso:', resultado.data.success);
        console.log('üìù Mensagem:', resultado.data.message);
        console.log('üìä Usu√°rios encontrados:', resultado.data.expiredUsers?.length || 0);
        console.log('‚è∞ Timestamp:', resultado.data.timestamp);
        
        if (resultado.data.expiredUsers && resultado.data.expiredUsers.length > 0) {
            console.log('\nüë• USU√ÅRIOS COM PLANO EXPIRADO ENCONTRADOS:');
            console.log('==========================================');
            resultado.data.expiredUsers.forEach((user, index) => {
                console.log(`${index + 1}. ID: ${user.userId}`);
                console.log(`   Email: ${user.email}`);
                console.log(`   Plano: ${user.plano}`);
                console.log(`   Expirou em: ${user.planExpiresAt}`);
                console.log(`   Upgrade em: ${user.upgradedAt}`);
                console.log('   ---');
            });
        } else {
            console.log('‚úÖ Nenhum usu√°rio com plano expirado encontrado');
        }
        
        console.log('\nüéØ RESULTADO DO TESTE:');
        console.log('=====================');
        
        if (resultado.data.success) {
            console.log('üéâ ‚úÖ TESTE DA CLOUD FUNCTION PASSOU!');
            console.log('‚úÖ A fun√ß√£o est√° configurada corretamente');
            console.log('‚úÖ O agendamento autom√°tico funcionar√° a cada 6 horas');
            console.log('‚ÑπÔ∏è Pr√≥ximas execu√ß√µes: 00:00, 06:00, 12:00, 18:00 (GMT-3)');
            return true;
        } else {
            console.log('‚ùå üö® TESTE FALHOU!');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
        
        if (error.code === 'functions/unauthenticated') {
            console.error('üîí Erro de autentica√ß√£o - fa√ßa login primeiro');
        } else if (error.code === 'functions/not-found') {
            console.error('üö´ Cloud Function n√£o encontrada - verifique o deploy');
        } else {
            console.error('üí• Erro inesperado:', error.message);
        }
        
        return false;
    }
}

// VERS√ÉO PARA EXECUTAR MANUALMENTE A FUNCTION REAL (CUIDADO!)
async function executarLimpezaManual() {
    console.log('‚ö†Ô∏è ATEN√á√ÉO: EXECU√á√ÉO MANUAL DA LIMPEZA DE PLANOS EXPIRADOS');
    console.log('=========================================================');
    console.log('üö® ESTA OPERA√á√ÉO IR√Å ALTERAR DADOS REAIS NO FIRESTORE!');
    
    const confirmacao = confirm('‚ö†Ô∏è CONFIRMA que deseja executar a limpeza manual de planos expirados?\n\nIsto ir√° converter usu√°rios com planos expirados para gratuito IMEDIATAMENTE!');
    
    if (!confirmacao) {
        console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio');
        return false;
    }
    
    try {
        // Simular execu√ß√£o da function schedulada
        const functions = window.firebase.functions();
        
        // Esta seria uma function separada para execu√ß√£o manual real
        console.log('üîÑ Executando limpeza manual...');
        console.log('‚è≥ Aguarde... (pode demorar alguns segundos)');
        
        // Para implementa√ß√£o real, seria necess√°rio criar uma function adicional
        // Por seguran√ßa, vamos apenas mostrar a mensagem
        console.log('‚ÑπÔ∏è Para execu√ß√£o manual real, acesse o Firebase Console');
        console.log('üì± Functions ‚Üí checkExpiredPlans ‚Üí Executar fun√ß√£o');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro na execu√ß√£o manual:', error);
        return false;
    }
}

// VERS√ÉO PARA NODE.JS/BACKEND (para execu√ß√£o em servidor)
async function testarViaCLI() {
    console.log('üñ•Ô∏è TESTE VIA CLI - CLOUD FUNCTION EXPIRACAO');
    console.log('==========================================');
    
    // Esta vers√£o seria para testes via linha de comando
    // Requer Firebase Admin SDK configurado
    
    console.log('üí° Para testar via CLI:');
    console.log('1. npm install -g firebase-tools');
    console.log('2. firebase login');
    console.log('3. firebase functions:shell');
    console.log('4. checkExpiredPlans()');
    
    console.log('\nüí° Para executar manualmente:');
    console.log('1. Firebase Console ‚Üí Functions');
    console.log('2. Localizar "checkExpiredPlans"');
    console.log('3. Clique em "Executar fun√ß√£o"');
}

// Disponibilizar no escopo global
window.testarCloudFunctionExpiracao = testarCloudFunctionExpiracao;
window.executarLimpezaManual = executarLimpezaManual;
window.testarViaCLI = testarViaCLI;

console.log('üß™ Testes de Cloud Function carregados!');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('  ‚Ä¢ testarCloudFunctionExpiracao() - Teste seguro');
console.log('  ‚Ä¢ executarLimpezaManual() - ‚ö†Ô∏è Execu√ß√£o real');
console.log('  ‚Ä¢ testarViaCLI() - Instru√ß√µes para CLI');
