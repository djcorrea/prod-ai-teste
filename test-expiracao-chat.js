/* ============ TESTE DE EXPIRA√á√ÉO AUTOM√ÅTICA NO CHAT ============ */
/**
 * Script para testar se a verifica√ß√£o de expira√ß√£o est√° funcionando no chat.js
 * Este teste simula um usu√°rio com plano Plus expirado tentando usar o chat
 */

// TESTE DEVE SER EXECUTADO NO CONSOLE DO NAVEGADOR ap√≥s autentica√ß√£o

async function testarExpiracaoAutomatica() {
    console.log('üß™ INICIANDO TESTE DE EXPIRA√á√ÉO AUTOM√ÅTICA NO CHAT');
    console.log('==================================================');
    
    try {
        // 1. Verificar se usu√°rio est√° autenticado
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå Usu√°rio n√£o est√° autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        console.log('üë§ Usu√°rio autenticado:', user.email);
        
        // 2. Buscar dados atuais do usu√°rio
        const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/11.1.0/firebase-firestore.js');
        const userDoc = await getDoc(doc(window.db, 'usuarios', user.uid));
        
        if (!userDoc.exists()) {
            console.error('‚ùå Usu√°rio n√£o encontrado no Firestore');
            return false;
        }
        
        const dadosAntes = userDoc.data();
        console.log('üìä DADOS ANTES DO TESTE:', {
            plano: dadosAntes.plano,
            isPlus: dadosAntes.isPlus,
            planExpiresAt: dadosAntes.planExpiresAt,
            mensagensRestantes: dadosAntes.mensagensRestantes
        });
        
        // 3. Verificar se tem planExpiresAt
        if (!dadosAntes.planExpiresAt) {
            console.warn('‚ö†Ô∏è Usu√°rio n√£o tem planExpiresAt - n√£o h√° o que testar');
            return false;
        }
        
        // 4. Verificar se o plano j√° expirou
        const agora = new Date();
        const expiracao = dadosAntes.planExpiresAt.toDate ? 
            dadosAntes.planExpiresAt.toDate() : new Date(dadosAntes.planExpiresAt);
        
        console.log('üìÖ Data atual:', agora);
        console.log('üìÖ Data de expira√ß√£o:', expiracao);
        
        if (expiracao > agora) {
            console.log('‚úÖ Plano ainda ativo - teste ser√° v√°lido apenas ap√≥s expira√ß√£o');
            console.log('‚ÑπÔ∏è Para testar, voc√™ pode temporariamente alterar planExpiresAt para uma data passada');
            return false;
        }
        
        console.log('‚è∞ Plano expirado detectado - testando convers√£o autom√°tica...');
        
        // 5. Testar chamada ao chat que deve acionar a verifica√ß√£o de expira√ß√£o
        console.log('üîÑ Enviando mensagem de teste para acionar verifica√ß√£o...');
        
        const idToken = await user.getIdToken();
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: 'teste de expira√ß√£o autom√°tica',
                conversationHistory: [],
                idToken: idToken
            })
        });
        
        console.log('üì° Status da resposta:', response.status);
        
        if (!response.ok) {
            const erro = await response.json();
            console.error('‚ùå Erro na API:', erro);
            return false;
        }
        
        const resultado = await response.json();
        console.log('üí¨ Resposta do chat:', resultado);
        
        // 6. Verificar se os dados foram atualizados
        console.log('üîç Verificando se houve convers√£o autom√°tica...');
        await new Promise(resolve => setTimeout(resolve, 1000)); // Aguardar 1 segundo
        
        const userDocDepois = await getDoc(doc(window.db, 'usuarios', user.uid));
        const dadosDepois = userDocDepois.data();
        
        console.log('üìä DADOS AP√ìS O TESTE:', {
            plano: dadosDepois.plano,
            isPlus: dadosDepois.isPlus,
            planExpiredAt: dadosDepois.planExpiredAt,
            previousPlan: dadosDepois.previousPlan,
            mensagensRestantes: dadosDepois.mensagensRestantes
        });
        
        // 7. Valida√ß√µes
        console.log('\nüîç VALIDA√á√ïES:');
        console.log('===============');
        
        let todasValidacoesPassed = true;
        
        // Deve ter sido convertido para gratuito
        if (dadosDepois.plano === 'gratis') {
            console.log('‚úÖ Plano convertido para gratuito');
        } else {
            console.error('‚ùå FALHA: Plano n√£o foi convertido para gratuito');
            todasValidacoesPassed = false;
        }
        
        // isPlus deve ser false
        if (dadosDepois.isPlus === false) {
            console.log('‚úÖ isPlus definido como false');
        } else {
            console.error('‚ùå FALHA: isPlus n√£o foi definido como false');
            todasValidacoesPassed = false;
        }
        
        // Deve ter planExpiredAt
        if (dadosDepois.planExpiredAt) {
            console.log('‚úÖ planExpiredAt registrado');
        } else {
            console.error('‚ùå FALHA: planExpiredAt n√£o foi registrado');
            todasValidacoesPassed = false;
        }
        
        // Deve ter previousPlan
        if (dadosDepois.previousPlan === 'plus') {
            console.log('‚úÖ previousPlan registrado como plus');
        } else {
            console.error('‚ùå FALHA: previousPlan n√£o foi registrado corretamente');
            todasValidacoesPassed = false;
        }
        
        // Deve ter mensagens resetadas
        if (dadosDepois.mensagensRestantes === 10) {
            console.log('‚úÖ Mensagens restantes resetadas para 10');
        } else {
            console.error('‚ùå FALHA: Mensagens restantes n√£o foram resetadas');
            todasValidacoesPassed = false;
        }
        
        console.log('\nüéØ RESULTADO FINAL:');
        console.log('==================');
        
        if (todasValidacoesPassed) {
            console.log('üéâ ‚úÖ TESTE PASSOU! Verifica√ß√£o de expira√ß√£o funcionando corretamente');
            console.log('‚úÖ Usu√°rios com planos expirados ser√£o automaticamente convertidos para gratuito');
            return true;
        } else {
            console.log('‚ùå üö® TESTE FALHOU! Verifica√ß√£o de expira√ß√£o n√£o est√° funcionando');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
        return false;
    }
}

// Fun√ß√£o para ser chamada no console
window.testarExpiracaoAutomatica = testarExpiracaoAutomatica;

console.log('üß™ Teste de expira√ß√£o autom√°tica carregado!');
console.log('üìã Para executar: testarExpiracaoAutomatica()');
console.log('‚ö†Ô∏è IMPORTANTE: Usu√°rio deve estar autenticado e ter planExpiresAt expirado');
