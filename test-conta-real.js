/**
 * SCRIPT DE TESTE DEFINITIVO - CANCELAMENTO PARA CONTAS REAIS
 * ============================================================
 * 
 * Este script valida ESPECIFICAMENTE contas reais que pagaram via Mercado Pago.
 * Execute no console do navegador ap√≥s fazer login com conta real.
 */

async function testarCancelamentoContaReal() {
    console.log('üö® TESTE DEFINITIVO - CANCELAMENTO CONTA REAL üö®');
    console.log('================================================');
    
    try {
        // 1. Verificar se usu√°rio est√° autenticado
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå FALHA: Usu√°rio n√£o autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        console.log('üë§ Usu√°rio autenticado:', user.email);
        console.log('üÜî UID:', user.uid);
        
        // 2. Verificar dados no Firestore ANTES do cancelamento
        const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/11.1.0/firebase-firestore.js');
        const userDoc = await getDoc(doc(window.db, 'usuarios', user.uid));
        
        if (!userDoc.exists()) {
            console.error('‚ùå FALHA: Dados do usu√°rio n√£o encontrados no Firestore');
            return false;
        }
        
        const dadosAntes = userDoc.data();
        console.log('\nüìä DADOS ANTES DO CANCELAMENTO:');
        console.log('================================');
        console.log('- Plano:', dadosAntes.plano);
        console.log('- IsPlus:', dadosAntes.isPlus);
        console.log('- Status:', dadosAntes.subscriptionStatus || 'active');
        console.log('- Expira em:', dadosAntes.planExpiresAt);
        console.log('- Upgrade em:', dadosAntes.upgradedAt);
        console.log('- Deve renovar:', dadosAntes.shouldRenew);
        
        // 3. VALIDA√á√ïES PR√â-CANCELAMENTO PARA CONTA REAL
        console.log('\nüîç VALIDA√á√ïES PR√â-CANCELAMENTO:');
        console.log('================================');
        
        // Deve ter plano Plus
        const temPlusValido = (dadosAntes.plano === 'plus' || dadosAntes.isPlus === true);
        if (!temPlusValido) {
            console.error('‚ùå FALHA: Usu√°rio n√£o tem plano Plus');
            return false;
        }
        console.log('‚úÖ Plano Plus confirmado');
        
        // Para conta real, deve ter planExpiresAt
        if (!dadosAntes.planExpiresAt) {
            console.warn('‚ö†Ô∏è ATEN√á√ÉO: Conta sem planExpiresAt (pode ser conta de teste)');
        } else {
            console.log('‚úÖ Data de expira√ß√£o presente');
            
            // Verificar se n√£o expirou
            const agora = new Date();
            const expiracao = dadosAntes.planExpiresAt.toDate ? dadosAntes.planExpiresAt.toDate() : new Date(dadosAntes.planExpiresAt);
            
            if (expiracao <= agora) {
                console.error('‚ùå FALHA: Plano j√° expirou em', expiracao);
                return false;
            }
            console.log('‚úÖ Plano ativo at√©:', expiracao);
        }
        
        // N√£o deve estar cancelado
        if (dadosAntes.subscriptionStatus === 'cancelled') {
            console.error('‚ùå FALHA: Assinatura j√° estava cancelada');
            console.log('üìù Testando cancelamento duplo...');
            
            // Testar cancelamento duplo
            const idToken = await user.getIdToken();
            const response = await fetch('/api/cancel-subscription', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${idToken}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (response.status === 400) {
                const result = await response.json();
                console.log('‚úÖ Cancelamento duplo tratado corretamente:', result.error);
                return true; // Teste passou
            } else {
                console.error('‚ùå FALHA: Cancelamento duplo n√£o tratado corretamente');
                return false;
            }
        }
        console.log('‚úÖ Assinatura ativa (n√£o cancelada)');
        
        // 4. EXECUTAR CANCELAMENTO
        console.log('\nüîÑ EXECUTANDO CANCELAMENTO:');
        console.log('============================');
        
        const idToken = await user.getIdToken();
        console.log('üîê Token obtido, enviando requisi√ß√£o...');
        
        const response = await fetch('/api/cancel-subscription', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${idToken}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üì° Status da resposta:', response.status);
        console.log('üì° Response OK:', response.ok);
        
        const result = await response.json();
        console.log('üì° Resultado:', result);
        
        if (!response.ok || !result.success) {
            console.error('‚ùå FALHA: Cancelamento n√£o foi bem-sucedido');
            console.error('Detalhes:', result);
            return false;
        }
        
        console.log('‚úÖ API retornou sucesso');
        
        // 5. VERIFICAR DADOS AP√ìS CANCELAMENTO
        console.log('\nüìä VERIFICANDO DADOS AP√ìS CANCELAMENTO:');
        console.log('========================================');
        
        // Aguardar um pouco para garantir que o Firestore foi atualizado
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const userDocDepois = await getDoc(doc(window.db, 'usuarios', user.uid));
        const dadosDepois = userDocDepois.data();
        
        console.log('- Plano:', dadosDepois.plano);
        console.log('- IsPlus:', dadosDepois.isPlus);
        console.log('- Status:', dadosDepois.subscriptionStatus);
        console.log('- Expira em:', dadosDepois.planExpiresAt);
        console.log('- Upgrade em:', dadosDepois.upgradedAt);
        console.log('- Deve renovar:', dadosDepois.shouldRenew);
        console.log('- Cancelado em:', dadosDepois.cancelledAt);
        
        // 6. VALIDA√á√ïES P√ìS-CANCELAMENTO
        console.log('\nüîç VALIDA√á√ïES P√ìS-CANCELAMENTO:');
        console.log('================================');
        
        let todasValidacoesPassed = true;
        
        // Plano deve continuar Plus
        if (dadosDepois.plano === 'plus' || dadosDepois.isPlus === true) {
            console.log('‚úÖ Plano Plus preservado');
        } else {
            console.error('‚ùå FALHA CR√çTICA: Plano Plus foi removido!');
            todasValidacoesPassed = false;
        }
        
        // Data de expira√ß√£o deve ser preservada (para contas reais)
        if (dadosAntes.planExpiresAt) {
            if (dadosDepois.planExpiresAt) {
                console.log('‚úÖ Data de expira√ß√£o preservada');
            } else {
                console.error('‚ùå FALHA CR√çTICA: Data de expira√ß√£o foi removida!');
                todasValidacoesPassed = false;
            }
        }
        
        // Status deve ser cancelado
        if (dadosDepois.subscriptionStatus === 'cancelled') {
            console.log('‚úÖ Status de cancelamento registrado');
        } else {
            console.error('‚ùå FALHA: Status de cancelamento n√£o registrado');
            todasValidacoesPassed = false;
        }
        
        // Renova√ß√£o deve estar desabilitada
        if (dadosDepois.shouldRenew === false) {
            console.log('‚úÖ Renova√ß√£o desabilitada');
        } else {
            console.error('‚ùå FALHA: Renova√ß√£o n√£o foi desabilitada');
            todasValidacoesPassed = false;
        }
        
        // Data de cancelamento deve existir
        if (dadosDepois.cancelledAt) {
            console.log('‚úÖ Data de cancelamento registrada');
        } else {
            console.error('‚ùå FALHA: Data de cancelamento n√£o registrada');
            todasValidacoesPassed = false;
        }
        
        // 7. TESTE DE ACESSO CONTINUADO
        console.log('\nüîç TESTANDO ACESSO CONTINUADO AO PLUS:');
        console.log('======================================');
        
        // Simular verifica√ß√£o de plano (como o sistema faz)
        const aindaTemPlus = (dadosDepois.plano === 'plus');
        if (aindaTemPlus) {
            console.log('‚úÖ Sistema ainda reconhece como usu√°rio Plus');
        } else {
            console.error('‚ùå FALHA CR√çTICA: Sistema n√£o reconhece mais como Plus!');
            todasValidacoesPassed = false;
        }
        
        // 8. RESULTADO FINAL
        console.log('\nüéØ RESULTADO FINAL:');
        console.log('===================');
        
        if (todasValidacoesPassed) {
            console.log('üéâ SUCESSO TOTAL! Cancelamento funcionou perfeitamente para conta real!');
            console.log('‚úÖ Todas as valida√ß√µes passaram');
            console.log('‚úÖ Funcionalidade pronta para produ√ß√£o');
            return true;
        } else {
            console.log('‚ùå FALHAS DETECTADAS! Revisar implementa√ß√£o');
            return false;
        }
        
    } catch (error) {
        console.error('‚ùå ERRO CR√çTICO NO TESTE:', error);
        console.error('Stack trace:', error.stack);
        return false;
    }
}

// Para executar o teste, cole no console e execute:
// testarCancelamentoContaReal();

console.log('üß™ Script de teste para contas reais carregado.');
console.log('üìã Execute: testarCancelamentoContaReal()');
console.log('‚ö†Ô∏è  IMPORTANTE: Use apenas com contas reais que pagaram via Mercado Pago!');
