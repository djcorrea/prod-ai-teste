/* ============ TESTE DO MONITORAMENTO FRONTEND DE EXPIRA√á√ÉO ============ */
/**
 * Script para testar se o monitoramento frontend de expira√ß√£o est√° funcionando
 * Este script pode ser executado no console do navegador
 */

// TESTE PRINCIPAL - Verifica√ß√£o de Expira√ß√£o Frontend
async function testarMonitoramentoExpiracao() {
    console.log('üß™ INICIANDO TESTE DE MONITORAMENTO FRONTEND DE EXPIRA√á√ÉO');
    console.log('========================================================');
    
    try {
        // 1. Verificar se usu√°rio est√° autenticado
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå Usu√°rio n√£o est√° autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        console.log('üë§ Usu√°rio autenticado:', user.email);
        
        // 2. Verificar se Firebase Firestore est√° dispon√≠vel
        if (!window.db) {
            console.error('‚ùå Firestore n√£o est√° dispon√≠vel');
            return false;
        }
        
        // 3. Buscar dados atuais do usu√°rio
        const { doc, getDoc } = await import('https://www.gstatic.com/firebasejs/11.1.0/firebase-firestore.js');
        const userDoc = await getDoc(doc(window.db, 'usuarios', user.uid));
        
        if (!userDoc.exists()) {
            console.error('‚ùå Usu√°rio n√£o encontrado no Firestore');
            return false;
        }
        
        const userData = userDoc.data();
        console.log('üìä DADOS DO USU√ÅRIO:', {
            plano: userData.plano,
            isPlus: userData.isPlus,
            planExpiresAt: userData.planExpiresAt,
            subscriptionStatus: userData.subscriptionStatus
        });
        
        // 4. Verificar se tem plano Plus com data de expira√ß√£o
        if (!userData.planExpiresAt) {
            console.warn('‚ö†Ô∏è Usu√°rio n√£o tem planExpiresAt - teste n√£o aplic√°vel');
            console.log('üí° Este teste √© apenas para usu√°rios com plano Plus que t√™m data de expira√ß√£o');
            return false;
        }
        
        if (userData.plano !== 'plus') {
            console.warn('‚ö†Ô∏è Usu√°rio n√£o tem plano Plus - teste n√£o aplic√°vel');
            return false;
        }
        
        // 5. Verificar data de expira√ß√£o
        const currentDate = new Date();
        let expirationDate;
        
        // Converter planExpiresAt para Date
        if (userData.planExpiresAt instanceof Date) {
            expirationDate = userData.planExpiresAt;
        } else if (userData.planExpiresAt.toDate && typeof userData.planExpiresAt.toDate === 'function') {
            expirationDate = userData.planExpiresAt.toDate();
        } else if (typeof userData.planExpiresAt === 'string' || typeof userData.planExpiresAt === 'number') {
            expirationDate = new Date(userData.planExpiresAt);
        } else {
            console.error('‚ùå Formato de planExpiresAt n√£o reconhecido:', userData.planExpiresAt);
            return false;
        }
        
        console.log('üìÖ VERIFICA√á√ÉO DE DATAS:');
        console.log('  Data atual:', currentDate.toLocaleString('pt-BR'));
        console.log('  Data de expira√ß√£o:', expirationDate.toLocaleString('pt-BR'));
        console.log('  J√° expirou?', expirationDate <= currentDate);
        
        // 6. Simular verifica√ß√£o de expira√ß√£o
        if (expirationDate <= currentDate) {
            console.log('‚è∞ PLANO EXPIRADO DETECTADO!');
            console.log('üîÑ O monitoramento frontend deveria acionar reload/logout em alguns segundos...');
            console.log('‚úÖ TESTE: Verifica√ß√£o de expira√ß√£o est√° funcionando');
            
            // Avisar que o reload vai acontecer
            console.log('‚ö†Ô∏è ATEN√á√ÉO: Esta p√°gina ser√° recarregada automaticamente pelo sistema de monitoramento');
            
            return true;
        } else {
            console.log('‚úÖ Plano ainda ativo');
            console.log('‚ÑπÔ∏è Para testar a expira√ß√£o, voc√™ precisaria ter um plano j√° expirado');
            console.log('üí° Ou alterar temporariamente planExpiresAt no Firestore para uma data passada');
            
            // Calcular tempo restante
            const timeRemaining = expirationDate - currentDate;
            const daysRemaining = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
            const hoursRemaining = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            
            console.log(`‚è≥ Tempo restante: ${daysRemaining} dias e ${hoursRemaining} horas`);
            
            return true;
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante o teste:', error);
        return false;
    }
}

// TESTE ESPEC√çFICO - Verificar se Plan Monitor est√° ativo
function testarPlanMonitorAtivo() {
    console.log('üîç VERIFICANDO SE PLAN MONITOR EST√Å ATIVO');
    console.log('========================================');
    
    // Verificar se as fun√ß√µes est√£o definidas
    if (typeof checkUserPlanStatus === 'function') {
        console.log('‚úÖ Fun√ß√£o checkUserPlanStatus encontrada');
    } else {
        console.log('‚ùå Fun√ß√£o checkUserPlanStatus N√ÉO encontrada');
        console.log('üí° Certifique-se de que plan-monitor.js est√° carregado');
    }
    
    // Verificar se startPlanMonitoring foi executado
    if (typeof startPlanMonitoring === 'function') {
        console.log('‚úÖ Fun√ß√£o startPlanMonitoring encontrada');
    } else {
        console.log('‚ùå Fun√ß√£o startPlanMonitoring N√ÉO encontrada');
    }
    
    // Verificar p√°gina atual
    const isMainPage = document.querySelector('.hero') || document.querySelector('#startSendBtn') || window.location.pathname.includes('index.html');
    const isGerenciarPage = window.location.pathname.includes('gerenciar.html');
    
    console.log('üìÑ P√°gina atual:', {
        isMainPage,
        isGerenciarPage,
        pathname: window.location.pathname
    });
    
    if (isMainPage) {
        console.log('‚úÖ P√°gina principal - monitoramento deve estar ativo');
        console.log('üí° O plan-monitor.js deve verificar expira√ß√£o a cada 30 segundos');
    } else if (isGerenciarPage) {
        console.log('‚úÖ P√°gina de gerenciamento - verifica√ß√£o √∫nica na autentica√ß√£o');
        console.log('üí° O gerenciar.js deve verificar expira√ß√£o ao fazer login');
    } else {
        console.log('‚ÑπÔ∏è P√°gina secund√°ria - monitoramento pode estar desabilitado');
    }
}

// TESTE DE SIMULA√á√ÉO - Criar cen√°rio de expira√ß√£o
async function simularExpiracao() {
    console.log('üé≠ SIMULANDO CEN√ÅRIO DE EXPIRA√á√ÉO');
    console.log('=================================');
    console.log('‚ö†Ô∏è ESTE TESTE IR√Å ALTERAR DADOS NO FIRESTORE!');
    
    const confirmacao = confirm('‚ö†Ô∏è CONFIRMA que deseja simular expira√ß√£o?\n\nIsto ir√° alterar planExpiresAt para data passada!');
    
    if (!confirmacao) {
        console.log('‚ùå Simula√ß√£o cancelada pelo usu√°rio');
        return false;
    }
    
    try {
        // Verificar autentica√ß√£o
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå Usu√°rio n√£o est√° autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        
        // Importar updateDoc e doc
        const { doc, updateDoc } = await import('https://www.gstatic.com/firebasejs/11.1.0/firebase-firestore.js');
        
        // Definir data expirada (1 hora atr√°s)
        const expiredDate = new Date(Date.now() - (60 * 60 * 1000));
        
        console.log('üîÑ Alterando planExpiresAt para:', expiredDate.toLocaleString('pt-BR'));
        
        // Atualizar no Firestore
        await updateDoc(doc(window.db, 'usuarios', user.uid), {
            planExpiresAt: expiredDate
        });
        
        console.log('‚úÖ planExpiresAt alterado com sucesso!');
        console.log('‚è∞ Em poucos segundos o sistema deve detectar a expira√ß√£o e fazer reload');
        console.log('üîÑ Aguardando a√ß√£o do monitoramento...');
        
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao simular expira√ß√£o:', error);
        return false;
    }
}

// FUN√á√ÉO DE RESTAURA√á√ÉO - Voltar data de expira√ß√£o para o futuro
async function restaurarExpiracao() {
    console.log('üîß RESTAURANDO DATA DE EXPIRA√á√ÉO');
    console.log('=================================');
    
    try {
        if (!window.auth || !window.auth.currentUser) {
            console.error('‚ùå Usu√°rio n√£o est√° autenticado');
            return false;
        }
        
        const user = window.auth.currentUser;
        const { doc, updateDoc } = await import('https://www.gstatic.com/firebasejs/11.1.0/firebase-firestore.js');
        
        // Definir data futura (30 dias a partir de agora)
        const futureDate = new Date(Date.now() + (30 * 24 * 60 * 60 * 1000));
        
        console.log('üîÑ Restaurando planExpiresAt para:', futureDate.toLocaleString('pt-BR'));
        
        await updateDoc(doc(window.db, 'usuarios', user.uid), {
            planExpiresAt: futureDate
        });
        
        console.log('‚úÖ Data de expira√ß√£o restaurada com sucesso!');
        return true;
        
    } catch (error) {
        console.error('‚ùå Erro ao restaurar expira√ß√£o:', error);
        return false;
    }
}

// Disponibilizar fun√ß√µes no escopo global
window.testarMonitoramentoExpiracao = testarMonitoramentoExpiracao;
window.testarPlanMonitorAtivo = testarPlanMonitorAtivo;
window.simularExpiracao = simularExpiracao;
window.restaurarExpiracao = restaurarExpiracao;

console.log('üß™ Testes de monitoramento frontend carregados!');
console.log('üìã Fun√ß√µes dispon√≠veis:');
console.log('  ‚Ä¢ testarMonitoramentoExpiracao() - Teste principal');
console.log('  ‚Ä¢ testarPlanMonitorAtivo() - Verificar se monitor est√° rodando');
console.log('  ‚Ä¢ simularExpiracao() - ‚ö†Ô∏è Simular plano expirado');
console.log('  ‚Ä¢ restaurarExpiracao() - Restaurar data futura');
