import { auth, db } from './firebaseAdmin.js';

export const config = { api: { bodyParser: true } };

export default async function handler(req, res) {
  // Adicionar headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // Responder a preflight OPTIONS request
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  console.log('üöÄ API delete-account chamada');
  console.log('üìã M√©todo:', req.method);
  console.log('üìã Headers:', req.headers);
  
  // Permitir apenas POST
  if (req.method !== 'POST') {
    console.log('‚ùå M√©todo n√£o permitido:', req.method);
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  try {
    // Verificar token de autentica√ß√£o
    const authHeader = req.headers.authorization || '';
    console.log('üîê Auth header presente:', !!authHeader);
    
    if (!authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Token Bearer n√£o encontrado');
      return res.status(401).json({ error: 'Token de autoriza√ß√£o n√£o fornecido' });
    }

    const idToken = authHeader.split('Bearer ')[1];
    let decodedToken;
    
    try {
      decodedToken = await auth.verifyIdToken(idToken);
    } catch (error) {
      console.error('‚ùå Token inv√°lido:', error);
      return res.status(401).json({ error: 'Token inv√°lido' });
    }

    const userId = decodedToken.uid;
    
    // Valida√ß√£o adicional de seguran√ßa
    if (!userId || typeof userId !== 'string' || userId.length === 0) {
      console.error('‚ùå UID inv√°lido no token:', userId);
      return res.status(401).json({ error: 'Token n√£o cont√©m UID v√°lido' });
    }
    
    console.log('üóëÔ∏è Iniciando exclus√£o permanente da conta para usu√°rio:', userId);

    // Buscar dados do usu√°rio no Firestore para verificar se existe
    const userDoc = await db.collection('usuarios').doc(userId).get();
    
    if (!userDoc.exists) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado no Firestore, mas prosseguindo com exclus√£o do Auth');
    } else {
      console.log('üë§ Dados do usu√°rio encontrados no Firestore');
    }

    // ETAPA 1: EXCLUIR TODOS OS DADOS DO FIRESTORE
    try {
      console.log('üî• Excluindo dados do Firestore...');
      
      // Excluir documento principal do usu√°rio
      if (userDoc.exists) {
        await db.collection('usuarios').doc(userId).delete();
        console.log('‚úÖ Documento principal do usu√°rio exclu√≠do do Firestore');
      }
      
      // Excluir poss√≠veis subcole√ß√µes ou documentos relacionados
      // (Se houver mensagens de chat, logs, etc. em outras cole√ß√µes)
      
      // Exemplo: Se houver uma cole√ß√£o de mensagens por usu√°rio
      try {
        const messagesQuery = await db.collection('mensagens').where('userId', '==', userId).get();
        if (!messagesQuery.empty) {
          const batch = db.batch();
          messagesQuery.docs.forEach(doc => {
            batch.delete(doc.ref);
          });
          await batch.commit();
          console.log(`‚úÖ ${messagesQuery.docs.length} mensagens exclu√≠das do Firestore`);
        }
      } catch (msgError) {
        console.log('‚ö†Ô∏è Nenhuma mensagem encontrada ou erro ao excluir mensagens:', msgError.message);
      }

      // Exemplo: Se houver uma cole√ß√£o de logs por usu√°rio
      try {
        const logsQuery = await db.collection('logs').where('userId', '==', userId).get();
        if (!logsQuery.empty) {
          const batch = db.batch();
          logsQuery.docs.forEach(doc => {
            batch.delete(doc.ref);
          });
          await batch.commit();
          console.log(`‚úÖ ${logsQuery.docs.length} logs exclu√≠dos do Firestore`);
        }
      } catch (logError) {
        console.log('‚ö†Ô∏è Nenhum log encontrado ou erro ao excluir logs:', logError.message);
      }

    } catch (firestoreError) {
      console.error('‚ùå Erro ao excluir dados do Firestore:', firestoreError);
      // Continuar mesmo se houver erro no Firestore, pois o importante √© excluir o usu√°rio
    }

    // ETAPA 2: EXCLUIR USU√ÅRIO DO FIREBASE AUTHENTICATION
    try {
      console.log('üîê Excluindo usu√°rio do Firebase Authentication...');
      await auth.deleteUser(userId);
      console.log('‚úÖ Usu√°rio exclu√≠do do Firebase Authentication');
    } catch (authError) {
      console.error('‚ùå Erro ao excluir usu√°rio do Authentication:', authError);
      
      // Se n√£o conseguir excluir do Auth, retornar erro
      return res.status(500).json({ 
        error: 'Erro ao excluir conta do sistema de autentica√ß√£o',
        details: authError.message,
        timestamp: new Date().toISOString()
      });
    }

    console.log('‚úÖ Conta exclu√≠da permanentemente com sucesso para usu√°rio:', userId);

    return res.status(200).json({ 
      success: true, 
      message: 'Sua conta foi exclu√≠da permanentemente com sucesso. Voc√™ ser√° redirecionado para a p√°gina inicial.' 
    });

  } catch (error) {
    console.error('‚ùå Erro completo ao excluir conta:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    return res.status(500).json({ 
      error: 'Erro interno do servidor ao excluir conta',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
}
