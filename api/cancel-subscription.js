import { auth, db } from './firebaseAdmin.js';
import { FieldValue } from 'firebase-admin/firestore';

export const config = { api: { bodyParser: true } };

export default async function handler(req, res) {
  // Adicionar headers CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  
  // Responder a preflight OPTIONS request
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }
  
  console.log('üöÄ API cancel-subscription chamada');
  console.log('üìã M√©todo:', req.method);
  console.log('üìã Headers:', req.headers);
  
  // Permitir apenas POST
  if (req.method !== 'POST') {
    console.log('‚ùå M√©todo n√£o permitido:', req.method);
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  try {
    // Verificar token de autentica√ß√£o
    const authHeader = req.headers.authorization || '';
    console.log('üîê Auth header presente:', !!authHeader);
    
    if (!authHeader.startsWith('Bearer ')) {
      console.log('‚ùå Token Bearer n√£o encontrado');
      return res.status(401).json({ error: 'Token de autoriza√ß√£o n√£o fornecido' });
    }

    const idToken = authHeader.split('Bearer ')[1];
    let decodedToken;
    
    try {
      decodedToken = await auth.verifyIdToken(idToken);
    } catch (error) {
      console.error('‚ùå Token inv√°lido:', error);
      return res.status(401).json({ error: 'Token inv√°lido' });
    }

    const userId = decodedToken.uid;
    
    // Valida√ß√£o adicional de seguran√ßa
    if (!userId || typeof userId !== 'string' || userId.length === 0) {
      console.error('‚ùå UID inv√°lido no token:', userId);
      return res.status(401).json({ error: 'Token n√£o cont√©m UID v√°lido' });
    }
    
    console.log('üîß Iniciando cancelamento de assinatura para usu√°rio:', userId);

    // Buscar dados do usu√°rio no Firestore
    const userDoc = await db.collection('usuarios').doc(userId).get();
    
    if (!userDoc.exists) {
      console.log('‚ùå Usu√°rio n√£o encontrado no Firestore');
      return res.status(404).json({ error: 'Usu√°rio n√£o encontrado' });
    }

    const userData = userDoc.data();
    
    // Prote√ß√£o contra dados ausentes ou corrompidos
    if (!userData || typeof userData !== 'object') {
      console.log('‚ùå Dados do usu√°rio ausentes ou inv√°lidos');
      return res.status(404).json({ error: 'Dados do usu√°rio n√£o encontrados' });
    }
    
    console.log('üë§ Dados do usu√°rio encontrados:', {
      plano: userData.plano,
      isPlus: userData.isPlus,
      subscriptionStatus: userData.subscriptionStatus,
      planExpiresAt: userData.planExpiresAt,
      upgradedAt: userData.upgradedAt,
      shouldRenew: userData.shouldRenew
    });
    
    // Verificar se o usu√°rio tem plano Plus REAL
    const hasValidPlusPlan = (userData.plano === 'plus' || userData.isPlus === true);
    
    if (!hasValidPlusPlan) {
      console.log('‚ùå Usu√°rio n√£o possui plano Plus');
      return res.status(400).json({ error: 'Usu√°rio n√£o possui assinatura ativa para cancelar' });
    }
    
    // VALIDA√á√ÉO ESPEC√çFICA PARA CONTAS REAIS
    // Para contas que pagaram via Mercado Pago, devem ter planExpiresAt
    const isRealAccount = userData.planExpiresAt && userData.upgradedAt;
    const isTestAccount = !userData.planExpiresAt && hasValidPlusPlan;
    
    if (isRealAccount) {
      console.log('‚úÖ Conta real detectada com data de expira√ß√£o:', userData.planExpiresAt);
      
      // Verificar se o plano ainda est√° ativo (n√£o expirou)
      const now = new Date();
      const expirationDate = userData.planExpiresAt instanceof Date ? 
        userData.planExpiresAt : 
        userData.planExpiresAt.toDate ? userData.planExpiresAt.toDate() : new Date(userData.planExpiresAt);
      
      if (expirationDate <= now) {
        console.log('‚ùå Plano j√° expirou em:', expirationDate);
        return res.status(400).json({ 
          error: 'N√£o √© poss√≠vel cancelar uma assinatura j√° expirada.',
          message: 'Seu plano j√° expirou. N√£o h√° assinatura ativa para cancelar.' 
        });
      }
      
      console.log('‚úÖ Plano ativo at√©:', expirationDate);
    } else if (isTestAccount) {
      console.log('‚ö†Ô∏è Conta de teste detectada (Plus sem data de expira√ß√£o)');
    } else {
      console.log('‚ùå Conta inv√°lida - nem real nem teste v√°lido');
      return res.status(400).json({ error: 'Usu√°rio n√£o possui assinatura ativa para cancelar' });
    }

    // Verificar se j√° foi cancelado
    if (userData.subscriptionStatus === 'cancelled') {
      console.log('‚ö†Ô∏è Assinatura j√° estava cancelada');
      return res.status(400).json({ 
        error: 'Assinatura j√° foi cancelada.',
        message: 'Esta assinatura j√° foi cancelada anteriormente.' 
      });
    }

    // NOTA: Este projeto usa pagamentos √∫nicos (preferences), n√£o assinaturas recorrentes
    // Portanto, n√£o h√° subscription_id real do Mercado Pago para cancelar
    // O cancelamento √© feito apenas no sistema interno
    
    console.log('‚ÑπÔ∏è Cancelando assinatura (pagamento √∫nico) - apenas no sistema interno');
    
    // Atualizar status no Firestore
    // IMPORTANTE: NUNCA remover o plano Plus ou planExpiresAt imediatamente
    // Apenas marcar como cancelado e parar renova√ß√µes futuras
    const updateData = {
      subscriptionStatus: 'cancelled',
      cancelledAt: FieldValue.serverTimestamp(),
      shouldRenew: false
    };
    
    // Para contas de teste que n√£o t√™m planExpiresAt, adicionar uma data
    // Para contas reais, PRESERVAR a data existente
    if (!userData.planExpiresAt) {
      console.log('üìÖ Adicionando data de expira√ß√£o para conta sem data pr√©via');
      updateData.planExpiresAt = new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)); // 30 dias
    } else {
      console.log('üìÖ Preservando data de expira√ß√£o existente:', userData.planExpiresAt);
      // N√ÉO adicionar planExpiresAt ao updateData para preservar o valor existente
    }

    console.log('üìù Dados a serem atualizados:', updateData);
    await db.collection('usuarios').doc(userId).update(updateData);

    console.log('‚úÖ Assinatura cancelada com sucesso para usu√°rio:', userId);

    return res.status(200).json({ 
      success: true, 
      message: 'Sua assinatura foi cancelada com sucesso. Voc√™ continuar√° com acesso ao Plus at√© o fim do per√≠odo atual.' 
    });

  } catch (error) {
    console.error('‚ùå Erro completo ao cancelar assinatura:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    return res.status(500).json({ 
      error: 'Erro interno do servidor ao cancelar assinatura',
      details: error.message,
      timestamp: new Date().toISOString()
    });
  }
}
