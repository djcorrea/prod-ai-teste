import { auth, db } from './firebaseAdmin.js';
import { FieldValue, Timestamp } from 'firebase-admin/firestore';
import cors from 'cors';

// Middleware CORS din√¢mico
const corsMiddleware = cors({
  origin: (origin, callback) => {
    const fixedOrigin = 'https://prod-ai-teste.vercel.app';
    const vercelPreviewRegex = /^https:\/\/prod-ai-teste-[a-z0-9\-]+\.vercel\.app$/;
    
    // Adicionar suporte para desenvolvimento local
    const localOrigins = [
      'http://localhost:3000',
      'http://localhost:5500',
      'http://127.0.0.1:5500',
      'http://127.0.0.1:3000',
      'http://localhost:8080',
      'http://127.0.0.1:8080'
    ];

    // Permitir origens locais, Vercel e file://
    if (!origin || 
        origin.includes(fixedOrigin) || 
        vercelPreviewRegex.test(origin) ||
        localOrigins.includes(origin) ||
        origin.startsWith('file://')) {
      callback(null, true);
    } else {
      console.log('CORS blocked origin:', origin);
      callback(new Error('Not allowed by CORS: ' + origin));
    }
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  credentials: true,
});

function runMiddleware(req, res, fn) {
  return new Promise((resolve, reject) => {
    fn(req, res, (result) => {
      if (result instanceof Error) {
        return reject(result);
      }
      return resolve(result);
    });
  });
}

// Fun√ß√£o para validar e sanitizar dados de entrada
function validateAndSanitizeInput(req) {
  const { message, conversationHistory = [], idToken } = req.body;
  
  if (!idToken || typeof idToken !== 'string') {
    throw new Error('TOKEN_MISSING');
  }
  if (!message || typeof message !== 'string' || message.trim().length === 0) {
    throw new Error('MESSAGE_INVALID');
  }
  
  let validHistory = [];
  if (Array.isArray(conversationHistory)) {
    validHistory = conversationHistory
      .filter(msg => {
        return msg && 
          typeof msg === 'object' && 
          msg.role && 
          msg.content &&
          typeof msg.content === 'string' &&
          msg.content.trim().length > 0 &&
          ['user', 'assistant', 'system'].includes(msg.role);
      })
      .slice(-10);
  }
  
  return {
    message: message.trim().substring(0, 2000),
    conversationHistory: validHistory,
    idToken: idToken.trim()
  };
}

// Fun√ß√£o para gerenciar limites de usu√°rio
async function handleUserLimits(db, uid, email) {
  const userRef = db.collection('usuarios').doc(uid);

  try {
    const result = await db.runTransaction(async (tx) => {
      const snap = await tx.get(userRef);
      const now = Timestamp.now();
      const today = now.toDate().toDateString();

      let userData;

      if (!snap.exists) {
        userData = {
          uid,
          plano: 'gratis',
          mensagensRestantes: 9,
          dataUltimoReset: now,
          createdAt: now,
        };
        if (email) {
          userData.email = email;
        }
        tx.set(userRef, userData);
      } else {
        userData = snap.data();
        const lastReset = userData.dataUltimoReset?.toDate().toDateString();

        // VERIFICA√á√ÉO AUTOM√ÅTICA DE EXPIRA√á√ÉO DO PLANO PLUS
        if (userData.plano === 'plus' && userData.planExpiresAt) {
          const currentDate = new Date();
          const expirationDate = userData.planExpiresAt instanceof Date ? 
            userData.planExpiresAt : 
            userData.planExpiresAt.toDate ? userData.planExpiresAt.toDate() : new Date(userData.planExpiresAt);
          
          if (expirationDate <= currentDate) {
            console.log('‚è∞ Plano Plus expirado, convertendo para gratuito:', uid);
            
            // Dados para converter plano expirado
            const expiredPlanData = {
              plano: 'gratis',
              isPlus: false,
              mensagensRestantes: 10,
              planExpiredAt: now,
              previousPlan: 'plus',
              dataUltimoReset: now
            };
            
            // Atualizar no Firestore
            tx.update(userRef, expiredPlanData);
            
            // Atualizar userData local para refletir as mudan√ßas
            userData = { ...userData, ...expiredPlanData };
            
            console.log('‚úÖ Usu√°rio convertido de Plus expirado para gratuito:', uid);
          }
        }

        if (lastReset !== today) {
          userData.mensagensRestantes = 10;
          tx.update(userRef, {
            mensagensRestantes: 10,
            dataUltimoReset: now,
          });
        }

        if (userData.plano === 'gratis') {
          if (userData.mensagensRestantes <= 0) {
            throw new Error('LIMIT_EXCEEDED');
          }
          tx.update(userRef, {
            mensagensRestantes: FieldValue.increment(-1),
          });
          userData.mensagensRestantes =
            (userData.mensagensRestantes || 10) - 1;
        }
      }

      return userData;
    });

    const finalSnap = await userRef.get();
    return { ...result, perfil: finalSnap.data().perfil };
  } catch (error) {
    if (error.message === 'LIMIT_EXCEEDED') {
      console.warn('üö´ Limite de mensagens atingido para:', email);
      throw error;
    }
    console.error('‚ùå Erro na transa√ß√£o do usu√°rio:', error);
    throw new Error('Erro ao processar limites do usu√°rio');
  }
}

// Fun√ß√£o para gerar system prompt personalizado para usu√°rios Plus
function generatePersonalizedSystemPrompt(perfil) {
  if (!perfil) {
    // Prompt t√©cnico padr√£o para usuarios Plus sem entrevista
    return `Voc√™ √© o PROD.AI üéµ, um especialista master em produ√ß√£o musical com conhecimento t√©cnico avan√ßado. 

INSTRU√á√ïES PRINCIPAIS:
- Seja direto, t√©cnico e preciso em todas as respostas
- Use valores espec√≠ficos, frequ√™ncias exatas (Hz), faixas din√¢micas (dB), tempos (ms)
- Mencione equipamentos, plugins e t√©cnicas por nome
- Forne√ßa par√¢metros exatos quando relevante
- Seja conciso mas completo - evite respostas gen√©ricas
- D√™ conselhos pr√°ticos e aplic√°veis imediatamente

ESPECIALIDADES T√âCNICAS:
- Mixagem: EQ preciso, compress√£o din√¢mica, reverb/delay, automa√ß√£o
- Mastering: Limiters, maximizers, an√°lise espectral, LUFS, headroom
- Sound Design: S√≠ntese, sampling, modula√ß√£o, efeitos
- Arranjo: Teoria musical aplicada, harmonias, progress√µes
- Ac√∫stica: Tratamento de sala, posicionamento de monitores
- Workflow: T√©cnicas de produ√ß√£o r√°pida e eficiente
`;
  }

  // Adaptar linguagem baseada no n√≠vel t√©cnico
  let linguagemStyle = '';
  switch(perfil.nivelTecnico?.toLowerCase()) {
    case 'iniciante':
      linguagemStyle = 'Use linguagem acess√≠vel mas ainda t√©cnica. Explique termos espec√≠ficos quando necess√°rio. Foque em conceitos fundamentais com valores pr√°ticos.';
      break;
    case 'intermediario':
    case 'intermedi√°rio':
      linguagemStyle = 'Misture explica√ß√µes did√°ticas com terminologia t√©cnica avan√ßada. Use valores espec√≠ficos e recomenda√ß√µes diretas.';
      break;
    case 'avancado':
    case 'avan√ßado':
    case 'profissional':
      linguagemStyle = 'Use linguagem totalmente t√©cnica e profissional. Seja direto com par√¢metros exatos, frequ√™ncias espec√≠ficas e t√©cnicas avan√ßadas.';
      break;
    default:
      linguagemStyle = 'Adapte a linguagem conforme a complexidade da pergunta, sempre mantendo precis√£o t√©cnica.';
  }

  // Informa√ß√µes espec√≠ficas da DAW
  let dawInfo = '';
  switch(perfil.daw?.toLowerCase()) {
    case 'fl-studio':
    case 'fl studio':
      dawInfo = 'Quando relevante, mencione atalhos do FL Studio (Ctrl+Shift+E para export, F9 para mixer), plugins nativos (Harmor, Serum, Parametric EQ 2), e workflows espec√≠ficos do FL.';
      break;
    case 'ableton':
    case 'ableton live':
      dawInfo = 'Quando relevante, mencione recursos do Ableton Live (Session View, Operator, Simpler, Max for Live), atalhos espec√≠ficos e t√©cnicas de performance ao vivo.';
      break;
    case 'logic':
    case 'logic pro':
      dawInfo = 'Quando relevante, mencione plugins nativos do Logic (Alchemy, Sculpture, Space Designer), atalhos e bibliotecas inclu√≠das.';
      break;
    case 'reaper':
      dawInfo = 'Quando relevante, mencione a flexibilidade do REAPER, ReaPlugs, customiza√ß√£o de interface e scripts personalizados.';
      break;
    default:
      dawInfo = 'Adapte recomenda√ß√µes para diferentes DAWs quando necess√°rio.';
  }

  // Contexto do estilo musical
  const estiloContext = perfil.estilo ? `Foque suas respostas no estilo ${perfil.estilo}, incluindo t√©cnicas espec√≠ficas, faixas de frequ√™ncia caracter√≠sticas, e refer√™ncias do g√™nero.` : '';

  // √Årea de dificuldade como prioridade
  const dificuldadeContext = perfil.dificuldade ? `O usu√°rio tem maior dificuldade com: ${perfil.dificuldade}. Priorize dicas e t√©cnicas relacionadas a esta √°rea.` : '';

  // Nome personalizado
  const nomeContext = perfil.nomeArtistico ? `Chame o usu√°rio de ${perfil.nomeArtistico}.` : '';

  // Contexto pessoal
  const sobreContext = perfil.sobre ? `Contexto pessoal do usu√°rio: ${perfil.sobre}` : '';

  return `Voc√™ √© o PROD.AI üéµ, especialista master em produ√ß√£o musical. ${nomeContext}

PERFIL DO USU√ÅRIO:
- N√≠vel: ${perfil.nivelTecnico || 'N√£o informado'}
- DAW Principal: ${perfil.daw || 'N√£o informado'}
- Estilo Musical: ${perfil.estilo || 'Variado'}
- Maior Dificuldade: ${perfil.dificuldade || 'N√£o informado'}
${sobreContext ? `- Sobre: ${sobreContext}` : ''}

INSTRU√á√ïES DE RESPOSTA:
${linguagemStyle}
${dawInfo}
${estiloContext}
${dificuldadeContext}

QUALIDADE T√âCNICA OBRIGAT√ìRIA:
- Use valores espec√≠ficos: frequ√™ncias exatas (Hz), n√≠veis (dB), tempos (ms)
- Mencione equipamentos e plugins por nome quando relevante
- Forne√ßa par√¢metros t√©cnicos precisos
- Seja direto e pr√°tico - evite respostas gen√©ricas
- D√™ conselhos aplic√°veis imediatamente
√≠ficos quando poss√≠vel (Hz, dB, ms)

Responda sempre com excel√™ncia t√©cnica e conhecimento profissional aplicado ao perfil espec√≠fico do usu√°rio.`;
}

// Fun√ß√£o para chamar a API da OpenAI
async function callOpenAI(messages, userData) {
  let systemPrompt;
  
  if (userData.plano === 'plus') {
    // Para usu√°rios Plus, usar prompt personalizado baseado no perfil
    systemPrompt = generatePersonalizedSystemPrompt(userData.perfil);
  } else {
    // Para usu√°rios gratuitos, usar prompt b√°sico existente
  systemPrompt = `Voc√™ √© o Prod.AI üéµ, especialista em produ√ß√£o musical. Ajude com d√∫vidas sobre produ√ß√£o, mixagem e masteriza√ß√£o de forma t√©cnica e direta.

INSTRU√á√ïES:
- Baseie 100% das recomenda√ß√µes nos dados fornecidos pelo usu√°rio (incluindo JSONs t√©cnicos quando presentes).
- Sempre utilize e cite explicitamente valores exatos (Hz, dB, LUFS, ms, porcentagens) nas recomenda√ß√µes.
- Explique o motivo de cada ajuste com base nesses n√∫meros (por exemplo: cortes/boosts de EQ, thresholds/ratios de compress√£o, ceiling/attack/release de limiters).
- Foque em solu√ß√µes aplic√°veis imediatamente, citando plugins e par√¢metros pr√°ticos quando fizer sentido.
- Evite generalidades. Conecte cada sugest√£o aos dados apresentados na pergunta.

Se houver uma an√°lise t√©cnica de √°udio anexada, trate como autoridade: use obrigatoriamente todos os valores relevantes (Peak, RMS, Din√¢mica e Frequ√™ncias Dominantes) ao construir a resposta.`;
  }
  const requestBody = {
    model: 'gpt-3.5-turbo',
    temperature: 0.7,
    max_tokens: 1000,
    messages: [
      {
        role: 'system',
        content: systemPrompt
      },
      ...messages,
    ],
  };

  try {
    const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify(requestBody),
    });

    if (!openaiRes.ok) {
      throw new Error(`OpenAI API erro: ${openaiRes.status} ${openaiRes.statusText}`);
    }

    const data = await openaiRes.json();

    if (!data.choices || !data.choices[0]?.message) {
      throw new Error('Resposta inv√°lida da OpenAI');
    }

    return data.choices[0].message.content.trim();
  } catch (error) {
    throw new Error('Falha na comunica√ß√£o com OpenAI');
  }
}

export default async function handler(req, res) {
  console.log('üîÑ Nova requisi√ß√£o recebida:', {
    method: req.method,
    timestamp: new Date().toISOString(),
    hasBody: !!req.body
  });

  try {
    await runMiddleware(req, res, corsMiddleware);
  } catch (err) {
    console.error('CORS error:', err);
    return res.status(403).end();
  }

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo n√£o permitido' });
  }

  try {
    let validatedData;
    try {
      validatedData = validateAndSanitizeInput(req);
    } catch (error) {
      if (error.message === 'TOKEN_MISSING') {
        return res.status(401).json({ error: 'Token de autentica√ß√£o necess√°rio' });
      }
      if (error.message === 'MESSAGE_INVALID') {
        return res.status(400).json({ error: 'Mensagem inv√°lida ou vazia' });
      }
      throw error;
    }

    const { message, conversationHistory, idToken } = validatedData;

    let decoded;
    try {
      decoded = await auth.verifyIdToken(idToken);
    } catch (err) {
      return res.status(401).json({ error: 'Token inv√°lido ou expirado' });
    }

    const uid = decoded.uid;
    const email = decoded.email;

    let userData;
    try {
      userData = await handleUserLimits(db, uid, email);
    } catch (error) {
      if (error.message === 'LIMIT_EXCEEDED') {
        return res.status(403).json({ error: 'Limite di√°rio de mensagens atingido' });
      }
      throw error;
    }

    const messages = [
      ...conversationHistory,
      { role: 'user', content: message },
    ];

    // Chamar OpenAI com dados completos do usu√°rio para personaliza√ß√£o
    const reply = await callOpenAI(messages, userData);

    if (userData.plano === 'gratis') {
      console.log('‚úÖ Mensagens restantes para', email, ':', userData.mensagensRestantes);
    } else {
      console.log('‚úÖ Resposta personalizada gerada para usu√°rio Plus:', email);
    }

    return res.status(200).json({ 
      reply,
      mensagensRestantes: userData.plano === 'gratis' ? userData.mensagensRestantes : null
    });

  } catch (error) {
    console.error('üí• ERRO NO SERVIDOR:', {
      message: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    });
    
    return res.status(500).json({ 
      error: 'Erro interno do servidor', 
      details: process.env.NODE_ENV === 'development' ? error.message : 'Erro interno'
    });
  }
}
